ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data")
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos")
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst),series = "test")
utoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
rm(list=ls())
setwd("/home/cris/mrcrstnherediagmez@gmail.com/seriesTemporales")
morella.dat<-read.csv("./datos/DatosEstaciones - 2018-02/9562X.csv",sep=";")
# dimensiones
dim(morella.dat)
# muestra de las primeras filas
head(morella.dat)
# eliminar ID
morella.dat<-morella.dat[,-1]
# hay un dato diario desde el 2016-09-07 hasta el 2018-02-28
# cuantos NAs hay en total
length(which(is.na(morella.dat)))
# cuantos Nas hay por columna
na_count <-sapply(morella.dat, function(y) sum(length(which(is.na(y)))))
# seleccionar desde Diciembre del 2017 hasta febrero de 2018
morella.DectoFeb<-morella.dat[448:nrow(morella.dat),2]
library(tseries)
serie<-ts(morella.DectoFeb,frequency=7)
##Preprocesamiento
#comprobando normalidad para usar mtsdi para imputación
monthplot(serie.imputed)shapiro.test(serie[0:5000])
dim(serie)
#install.packages('nortest')
library(nortest)
ad.test(serie) # como p-valor << 0.05 en ambos casos, no es normal
#Imputación de valores perdidos con
#install.packages("imputeTS")
library("imputeTS")
serie.imputed<-na.interpolation(serie)
#gráfico de la serie
autoplot(serie.imputed)
# análisis de tendencia y de estacionariedad
plot(decompose(serie.imputed))
library(forecast)
library(ggplot2)
#ggseasonplot(serie.imputed, year.labels=FALSE, continuous=TRUE)
ggsubseriesplot(serie.imputed)
# transformación logaritmica - NO porque tenemos temperaturas negativas
#serie.log<-log(serie.imputed)
#dividimos datos en train y test (total=537 datos)
#nsemanas<-length(serie.imputed[,2])/7 #76.71429
#ntrain<-floor(0.85*nsemanas)
#train<-window(serie.imputed[,2],end=ntrain)
#test<-window(serie.imputed[,2],start=ntrain+1,end=length(serie.imputed[,2]))
#length(train)
#length(test)
#timeTrain<-time(train)
#timeTest<-time(test)
testDim<-13 # 13 para test
train<-serie.imputed[1:(length(serie.imputed)-testDim)]
timeTrain<-1:length(train)
test<-serie.imputed[(length(serie.imputed)-testDim+1):length(serie.imputed)]
timeTest<-(length(train)+1):length(serie.imputed)
length(train)
length(test)
length(timeTrain)
length(timeTest)
# mostrar serie de entrenamiento + tiempo de test + serie de test
plot.ts(train,xlim=c(1,timeTest[length(timeTest)]))
lines(timeTest,test,col="red")
# modelado de la tendencia - no tiene tendencia
#--Pruebas descartadas--
#train.ts<-ts(train,frequency=7)
#fit.lin <- tslm(train.ts ~ trend)
#fit.spline<-tslm(train.ts~timeTrain+ I(timeTrain^2) + I(timeTrain^3))
#fcasts.pw <- forecast(fit.spline, newdata = timeTest)
#autoplot(train.ts) +autolayer(fitted(fit.lin), series = "Linear")+
#autoplot(train.ts) +autolayer(fitted(fit.spline), series = "Cubic Spline")+
#autolayer(fcasts.pw, series="Piecewise")
#params.H1<- lm(train~ sin((2*pi/180)*timeTrain) + cos((2*pi/180)*timeTrain))
#params.H1<- lm(train~ I(timeTrain) + I(timeTrain)^3)
# estimación de la tendencia de train y test
#estimatedTrainTrend<- params.H1$coefficients[1] + timeTrain^3*params.H1$coefficients[2]
#estimatedTestTrend<- params.H1$coefficients[1] + timeTest^3*params.H1$coefficients[2]
# eliminar la estacionalidad
ggAcf(serie.imputed)
# se supuso una estacionalidad de 7
estacionality<-decompose(serie.imputed)$seasonal[1:7]
# se elimina la estacionalidad de los 7 primeros valores de la serie, 8 al 14,  del 15 al 20... etc
ntimes<-length(train)/length(estacionality) # nveces= long serie/long estacionalidad
aux <-rep(estacionality,floor(ntimes))
serieTrainWithoutEst<-train-aux
serieTestWithoutEst<-test-estacionality
#gráfico sin est
plot.ts(serieTrainWithoutEst,xlim=c(1,timeTest[length(timeTest)]))
lines(timeTest,serieTestWithoutEst,col="red")
# comprobamos estacionariedad antes
acf(serieTrainWithoutEst)
adfTrain<-adf.test(serieTrainWithoutEst)
adfTest<-adf.test(serieTestWithoutEst)
# como no es estacionaria,diferenciamos una vez
train.Diff<-diff(train)
test.Diff<-diff(test)
# volvemos a hacer los test y los pasa, ya es estacionaria
adfTrain<-adf.test(train.Diff)
acf(train.Diff)
ggtsdisplay(train.Diff)
# test pacf pasa => estacionaria, podemos ajustar modelo
pacf(train.Diff)
# ajustamos modelo ARIMA, probados varios [(1,1,0),(2,1,0),(3,1,0),(4,1,0)]
fit <- Arima(serieTrainWithoutEst, order=c(3,1,0))
summary(fit)
checkresiduals(fit)
autoplot(forecast(fit,h=7))
forecast(fit,h=7)
val<-serieTrainWithoutEst+fit$residuals
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
model<-arima(serieTrainWithoutEst,order=c(3,1,0))
val<-serieTrainWithoutEst+model$residuals
predictions<-predict(model, n.ahead = 13)
predictedvalues<-predictions$pred
# podemos calcular el error del ajuste en train y test con el error cuadrático
errorTrain<-sum(model$residuals^2)
errorTest<-sum((predictedvalues-serieTestWithoutEst)^2)
errorTrain
errorTest
plot.ts(serieTrainWithoutEst,xlim=c(1,timeTest[length(timeTest)]))
# pintamos los valores reconstruidos de la serie con el modelo entrenado en color azul
lines(val,col="blue")
# serie sin tendencia ni estacionalidad en test
lines(timeTest,serieTestWithoutEst,col="red")
# valores predichos
lines(timeTest,predictedvalues,col="purple")
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
timeTest
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
plot.ts(serieTrainWithoutEst,xlim=c(1,timeTest[length(timeTest)]))
# pintamos los valores reconstruidos de la serie con el modelo entrenado en color azul
lines(val,col="blue")
# serie sin tendencia ni estacionalidad en test
lines(timeTest,serieTestWithoutEst,col="red")
# valores predichos
lines(timeTest,predictedvalues,col="purple")
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst,start = 77),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
autolayer(forecast(fit,h=7),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(forecast(fit,h=7),series="predichos")+
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(forecast(fit,h=7),series="predichos")+
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
xlab("Year") + ylab("") +
ggtitle("Predicción diaria") +
guides(colour=guide_legend(title=" "))
autoplot(ts(serieTrainWithoutEst), series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(forecast(fit,h=7),series="predichos")+
autolayer(ts(serieTestWithoutEst,start = 78),series = "test")+
xlab("week") + ylab("") +
ggtitle("Predicción diaria") +
guides(colour=guide_legend(title=" "))
# borrar entorno
rm(list=ls())
setwd("/home/cris/mrcrstnherediagmez@gmail.com/seriesTemporales")
zumaia.dat<-read.csv("./datos/DatosEstaciones - 2018-02/1041A.csv",sep=";")
# dimensiones
dim(zumaia.dat)
# muestra de las primeras filas
head(zumaia.dat)
# eliminar ID
zumaia.dat<-zumaia.dat[,-1]
# hay un dato diario desde el 2016-09-07 hasta el 2018-02-28
# cuantos NAs hay en total
length(which(is.na(zumaia.dat$Tmax)))
# muestra de las primeras filas
head(zumaia.dat)
zumaia.dat<-zumaia.dat[,-1]
# hay un dato diario desde el 2013-05-07 hasta el 2018-02-28
# cuantos NAs hay en total
length(which(is.na(zumaia.dat$Tmax)))
# seleccionar solo Fecha y Tmax
zumaia.dat<-zumaia.dat[,1:2]
library("imputeTS")
serie.imputed<-na.interpolation(zumaia.dat)
library(ggplot2)
library(xts)
serie.imputed.xts <- xts(serie.imputed[,2],
order.by = as.Date(serie.imputed[,1]),
origin="2013-05-07")
#agregamos por meses
serie.monthly<-apply.monthly(serie.imputed.xts,
FUN = mean)
# borrar entorno
rm(list=ls())
setwd("/home/cris/mrcrstnherediagmez@gmail.com/seriesTemporales")
zumaia.dat<-read.csv("./datos/DatosEstaciones - 2018-02/1041A.csv",sep=";")
# dimensiones
dim(zumaia.dat)
# muestra de las primeras filas
head(zumaia.dat)
# eliminar ID
zumaia.dat<-zumaia.dat[,-1]
# hay un dato diario desde el 2013-05-07 hasta el 2018-02-28
# cuantos NAs hay en total
length(which(is.na(zumaia.dat$Tmax)))
# seleccionar solo Fecha y Tmax
zumaia.dat<-zumaia.dat[,1:2]
library("imputeTS")
serie.imputed<-na.interpolation(zumaia.dat)
library(ggplot2)
library(xts)
serie.imputed.xts <- xts(serie.imputed[,2],
order.by = as.Date(serie.imputed[,1]),
origin="2013-05-07")
#agregamos por meses
serie.monthly<-apply.monthly(serie.imputed.xts,
FUN = mean)
serie.monthly
autoplot(serie.monthly)
plot(decompose(serie.monthly.ts))
#pasamos a TS con frecuencua mensual
(serie.monthly.ts<-ts(serie.monthly,frequency = 12,start = c(2013,5),end = c(2018,2)))
serie.monthly.ts<-window(serie.monthly.ts,start=c(2014,1))
plot(decompose(serie.monthly.ts))
length(serie.monthly)
# comprobando seasonality => hay una componente no estacionaria
ggsubseriesplot(serie.monthly.ts)
plot(decompose(serie.monthly.ts))
# comprobando seasonality => hay una componente no estacionaria
ggsubseriesplot(serie.monthly.ts)
ntrain<-c(2017,12)
train<-window(serie.monthly.ts,end=ntrain) #descartamos datos de 2013 dado que
# no están completos
test<-window(serie.monthly.ts,start=c(2018,1))
length(train)
length(test)
timeTrain<-time(train)
timeTest<-time(test)
timeTrain
timeTest
test
# modelado de la tendencia - no tiene tendencia
# modelado de la estacionalidad-eliminar la estacionalidad
ggAcf(serie.monthly.ts) # el patrón y los picos sobrepasando las líneas azules denotan estacionalidad
#observamos patrón estacionario de más frio en meses de invierno y picos de calor en agosto
# también identificamos excepciones como febrero de 2017 que ha sido excepcionalmente cálido
ggseasonplot(train, year.labels=TRUE, year.labels.left=TRUE) +
ylab("year") +
ggtitle("Tmax mean by month by year")
#observamos patrón estacionario de más frio en meses de invierno y picos de calor en agosto
# también identificamos excepciones como febrero de 2017 que ha sido excepcionalmente cálido
ggseasonplot(tserie.monthly.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("year") +
ggtitle("Tmax mean by month by year")
#observamos patrón estacionario de más frio en meses de invierno y picos de calor en agosto
# también identificamos excepciones como febrero de 2017 que ha sido excepcionalmente cálido
ggseasonplot(serie.monthly.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("year") +
ggtitle("Tmax mean by month by year")
# comprobamos estacionariedad antes
ggAcf(serieTrainWithoutEst)
estacionality<-decompose(serie.monthly.ts)$seasonal[1:12]
# se elimina la estacionalidad de los 12 primeros valores de la serie
ntimes<-length(train)/length(estacionality) # nveces= long serie/long estacionalidad
aux <-rep(estacionality,ntimes)
aux
serieTrainWithoutEst<-train-aux
serieTestWithoutEst<-test-estacionality[1:2]
# comprobamos estacionariedad antes
ggAcf(serieTrainWithoutEst)
adfTrain<-adf.test(serieTrainWithoutEst)
ggPacf(serieTrainWithoutEst)
# comprobamos estacionariedad antes
ggAcf(serieTrainWithoutEst)
ggPacf(serieTrainWithoutEst)
# comprobamos estacionariedad antes
ggAcf(serieTrainWithoutEst)
ggPacf(serieTrainWithoutEst)
# comprobamos estacionariedad antes
ggAcf(serieTrainWithoutEst)
ggAcf(diff(serieTrainWithoutEst))
ggPacf(diff(serieTrainWithoutEst))
# comprobamos estacionariedad antes
ggAcf(serieTrainWithoutEst)
ggPacf(serieTrainWithoutEst)
ggAcf(diff(serieTrainWithoutEst))
adf.test(diff(serieTrainWithoutEst))
adf.test((serieTrainWithoutEst))
ggPacf(serieTrainWithoutEst)
fit <- Arima(serieTrainWithoutEst, order=c(1,0,0))
summary(fit)
# podemos calcular el error del ajuste en train y test con el error cuadrático
errorTrain<-sum(fit$residuals^2)
errorTest<-sum((predicted$mean-serieTestWithoutEst)^2)
errorTrain
predicted<-forecast(fit,h=2)
val<-serieTrainWithoutEst+fit$residuals
# podemos calcular el error del ajuste en train y test con el error cuadrático
errorTrain<-sum(fit$residuals^2)
errorTest<-sum((predicted$mean-serieTestWithoutEst)^2)
errorTrain
errorTest
#como parece que ya hemos eliminado la estacionalidad, ajustamos modelo ARIMA
fit <- Arima(serieTrainWithoutEst, order=c(10,0,0))
summary(fit)
#como parece que ya hemos eliminado la estacionalidad, ajustamos modelo ARIMA
fit <- Arima(serieTrainWithoutEst, order=c(1,0,0))
summary(fit)
#como parece que ya hemos eliminado la estacionalidad, ajustamos modelo ARIMA
fit <- Arima(serieTrainWithoutEst, order=c(10,0,0))
summary(fit)
predicted<-forecast(fit,h=2)
# podemos calcular el error del ajuste en train y test con el error cuadrático
errorTrain<-sum(fit$residuals^2)
errorTest<-sum((predicted$mean-serieTestWithoutEst)^2)
errorTrain
errorTest
#como parece que ya hemos eliminado la estacionalidad, ajustamos modelo ARIMA
fit <- Arima(serieTrainWithoutEst, order=c(1,0,0))
summary(fit)
checkresiduals(fit)
autoplot(forecast(fit,h=2))
checkresiduals(fit)
autoplot(serieTrainWithoutEst, series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=2),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Percentage change in US consumption expenditure") +
guides(colour=guide_legend(title=" "))
autoplot(serieTrainWithoutEst, series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=2),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Predicción mensual") +
guides(colour=guide_legend(title=" "))
autoplot(serieTrainWithoutEst, series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(forecast(fit,h=2),series="predichos")+
autolayer(serieTestWithoutEst,series = "test")+
xlab("Year") + ylab("") +
ggtitle("Predicción mensual") +
guides(colour=guide_legend(title=" "))
autolayer(forecast(fit,h=2),series="predichos")+
autoplot(serieTrainWithoutEst, series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=2),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Predicción mensual") +
guides(colour=guide_legend(title=" "))
autoplot(serieTrainWithoutEst, series="Data") +
autolayer(val, series="Reconstruidos") +
autolayer(serieTestWithoutEst,series = "test")+
autolayer(forecast(fit,h=2),series="predichos")+
xlab("Year") + ylab("") +
ggtitle("Predicción mensual") +
guides(colour=guide_legend(title=" "))
forecast(fit,h=2)
test
boxTest<-Box.test(fit$residuals)
JBTest<-jarque.bera.test(fit$residuals)
ShapkiroTest<-shapiro.test(fit$residuals)
boxTest
?Box.test
boxTest<-Box.test(fit$residuals)
JBTest<-jarque.bera.test(fit$residuals)
ShapkiroTest<-shapiro.test(fit$residuals)
hist(fit$residuals,col="blue", prob=T)
lines(density(fit$residuals),col="green")
JBTest
ShapkiroTest
zumaia.dat<-read.csv("./datos/DatosEstaciones - 2018-02/1041A.csv",sep=";")
# eliminar ID
zumaia.dat<-zumaia.dat[,-1]
# seleccionar solo Fecha y Tmax
zumaia.dat<-zumaia.dat[,1:2]
# imputación
serie.imputed<-na.interpolation(zumaia.dat)
#agregación por meses de los años
serie.imputed.xts <- xts(serie.imputed[,2],
order.by = as.Date(serie.imputed[,1]),
origin="2013-05-07")
#agregamos por meses
serie.monthly<-apply.monthly(serie.imputed.xts,FUN = mean)
autoplot(serie.monthly)
#pasamos a TS con frecuencua mensual
(serie.monthly.ts<-ts(serie.monthly,frequency = 12,start = c(2013,5),end = c(2018,2)))
serie.monthly.ts<-window(serie.monthly.ts,start=c(2014,1))
plot(decompose(serie.monthly.ts))
length(serie.monthly)
# comprobando seasonality => hay una componente no estacionaria
ggsubseriesplot(serie.monthly.ts)
# se supuso una estacionalidad de 12
estacionality<-decompose(serie.monthly.ts)$seasonal[1:12]
# se elimina la estacionalidad de los 12 primeros valores de la serie
ntimes<-length(serie.monthly.ts)/length(estacionality) # nveces= long serie/long estacionalidad
aux <-rep(estacionality,ntimes)
aux
serie.monthly.ts.WithoutEst<-serie.monthly.ts-aux
#como parece que ya hemos eliminado la estacionalidad, ajustamos modelo ARIMA
fit <- Arima(serie.monthly.ts.WithoutEst, order=c(1,0,0))
predicted<-forecast(fit,h=2)
val<-serie.monthly.ts.WithoutEst+fit$residuals
# deshacemos cambios para calcular predicciones reales
adjustvals<-val+aux
predictedValues<-predicted$mean+estacionality[1:2]
time<-1:length(serie.monthly.ts)
timePred<-(time[length(time)]+(1:12))
predictedValues
?na.interpolation
?acf
?Box.test
boxTest<-Box.test(model$residuals)
#validar modelo
boxTest<-Box.test(fit$residuals)
boxTest
summary(fit)
checkresiduals(fit)
